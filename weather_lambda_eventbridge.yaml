---
- name: setup iam role for lambda
  hosts: localhost
  gather_facts: false
  vars_files: myvars.yaml
  tasks:
  - name: create lambda execution role
    amazon.aws.iam_role:
      name: "lambda-execution-role"
      state: present
      assume_role_policy_document: >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
    register: lambda_role
  - name: append lambda_role_arn to myvars.yaml
    lineinfile:
      path: ./myvars.yaml
      line: "{{ item }}"
    loop:
      - "lambda_role_arn: \"{{ lambda_role['iam_role']['arn'] }}\""
  - name: generate and attach lambda policy
    amazon.aws.iam_policy:
      iam_type: role
      iam_name: "lambda-execution-role"
      policy_name: "custom-weatherdashboard"
      policy_json: "{{ lookup('template', 'mypolicy.j2') }}"
      state: present
    register: lambda_policy
  - name: wait for iam role propagation
    pause:
      seconds: 10
  tags: iam

- name: setup lambda function
  hosts: localhost
  gather_facts: false
  vars_files: myvars.yaml
  tasks:
  - name: create zip file for lambda
    shell:
      cmd: "zip lambda_weather_alert.zip lambda_function.py"
      chdir: ./src
  - name: create Lambda function
    amazon.aws.lambda:
      name: "weather-alert"
      state: present
      zip_file: "./src/lambda_weather_alert.zip"
      runtime: "python3.9"
      role: "{{ lambda_role_arn }}"
      handler: "lambda_function.lambda_handler"
      environment_variables:
        SNS_TOPIC_ARN: "{{ sns_arn }}"
    register: lambda_function
  - name: append lambda variables to myvars.yaml
    lineinfile:
      path: ./myvars.yaml
      line: "{{ item }}"
    loop:
      - "lambda_function_name: \"{{ lambda_function['configuration']['function_name'] }}\""
      - "lambda_function_arn: \"{{ lambda_function['configuration']['function_arn'] | regex_replace(':[0-9]+$', '') }}\""
  tags: lambda


- name: setup eventbridge for s3 bucket
  hosts: localhost
  gather_facts: false
  vars_files: myvars.yaml
  tasks:
  - name: wait for lambda
    pause:
      seconds: 5
  - name: enable eventbridge notifications for S3 bucket
    shell: >
      aws s3api put-bucket-notification-configuration
      --bucket {{ bucketname }}
      --notification-configuration '{"EventBridgeConfiguration": {}}'
  - name: create eventbridge rule
    amazon.aws.cloudwatchevent_rule:
      name: "weather-s3-object-created"
      description: "trigger lambda on new object creation in s3"
      state: present
      event_pattern: >
        {
          "source": ["aws.s3"],
          "detail-type": ["Object Created"],
          "detail": {
            "bucket": {
              "name": ["{{ bucketname }}"]
            }
          }
        }
      targets:
        - id: "InvokeWeatherLambda"
          arn: "{{ lambda_function_arn }}"
    register: eventbridge_rule
  - name: debug eventbridge rule arn
    debug:
      var: eventbridge_rule.rule
  - name: add permission for eventbridge to invoke lambda
    amazon.aws.lambda_policy:
      state: present
      function_name: "{{ lambda_function_name }}"
      statement_id: "EventBridgeInvokePermission"
      action: "lambda:InvokeFunction"
      principal: "events.amazonaws.com"
      source_arn: "{{ eventbridge_rule.rule.arn }}"
    register: lambda_policy_action
  - name: show lambda policy action result
    ansible.builtin.debug:
      var: lambda_policy_action
  tags: eventbridge
